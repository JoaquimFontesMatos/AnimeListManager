{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Anime API",
    "description": "REST API for Managing a list of Animes And Mangas"
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Mangas",
      "description": "API for mangas in the system"
    },
    {
      "name": "Animes",
      "description": "API for animes in the system"
    },
    {
      "name": "Users",
      "description": "API for users in the system"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/m/mangas": {
      "post": {
        "tags": ["Mangas"],
        "description": "Create new manga in system",
        "parameters": [
          {
            "name": "manga",
            "in": "body",
            "description": "Manga we want to create",
            "schema": {
              "$ref": "#/definitions/Manga"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "New Manga is created",
            "schema": {
              "$ref": "#/definitions/Manga"
            }
          },
          "400": {
            "description": "No Manga given"
          },
          "500": {
            "description": "Error Saving Manga"
          }
        }
      },
      "get": {
        "tags": ["Mangas"],
        "summary": "Get all mangas in system",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 1,
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Mangas"
            }
          },
          "500": { "description": "Error Finding Mangas" }
        }
      }
    },
    "/m/manga/{mangaId}": {
      "parameters": [
        {
          "name": "mangaId",
          "in": "path",
          "required": true,
          "description": "ID of the manga that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Mangas"],
        "summary": "Get manga with given ID",
        "responses": {
          "200": {
            "description": "Manga is found",
            "schema": {
              "$ref": "#/definitions/Manga"
            }
          },
          "404": { "description": "Manga not Found" },
          "400": { "description": "No Manga given" },
          "500": { "description": "Error Finding Manga" }
        }
      },
      "delete": {
        "summary": "Delete manga with given ID",
        "tags": ["Mangas"],
        "responses": {
          "204": {
            "description": "Manga is deleted"
          },
          "404": { "description": "Manga not Found" },
          "400": { "description": "No Manga given" },
          "500": { "description": "Error deleting manga" }
        }
      },
      "put": {
        "summary": "Update manga with given ID",
        "tags": ["Mangas"],
        "parameters": [
          {
            "name": "manga",
            "in": "body",
            "description": "Manga with new values of properties",
            "schema": {
              "$ref": "#/definitions/Manga"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Manga is updated",
            "schema": {
              "$ref": "#/definitions/Manga"
            }
          },
          "404": { "description": "Manga not Found" },
          "400": { "description": "No Manga or Id given" },
          "500": { "description": "Error updating manga" }
        }
      }
    },
    "/a/animes": {
      "post": {
        "tags": ["Animes"],
        "description": "Create new anime in system",
        "parameters": [
          {
            "name": "anime",
            "in": "body",
            "description": "Anime we want to create",
            "schema": {
              "$ref": "#/definitions/Anime"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "New Anime is created",
            "schema": {
              "$ref": "#/definitions/Anime"
            }
          },
          "400": {
            "description": "No Anime given"
          },
          "500": {
            "description": "Error Saving Anime"
          }
        }
      },
      "get": {
        "tags": ["Animes"],
        "summary": "Get all animes in system",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 1,
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Animes"
            }
          },
          "500": { "description": "Error Finding Animes" }
        }
      }
    },
    "/a/anime/{animeId}": {
      "parameters": [
        {
          "name": "animeId",
          "in": "path",
          "required": true,
          "description": "ID of the anime that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Animes"],
        "summary": "Get anime with given ID",
        "responses": {
          "200": {
            "description": "Anime was found",
            "schema": {
              "$ref": "#/definitions/Anime"
            }
          },
          "404": { "description": "Anime not Found" },
          "400": { "description": "No Anime given" },
          "500": { "description": "Error Finding Anime" }
        }
      },
      "delete": {
        "summary": "Delete anime with given ID",
        "tags": ["Animes"],
        "responses": {
          "204": {
            "description": "Anime was deleted"
          },
          "404": { "description": "Anime not Found" },
          "400": { "description": "No Anime given" },
          "500": { "description": "Error deleting anime" }
        }
      },
      "put": {
        "summary": "Update anime with given ID",
        "tags": ["Animes"],
        "parameters": [
          {
            "name": "anime",
            "in": "body",
            "description": "Anime with new values of properties",
            "schema": {
              "$ref": "#/definitions/Anime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Anime is updated",
            "schema": {
              "$ref": "#/definitions/Anime"
            }
          },
          "404": { "description": "Anime not Found" },
          "400": { "description": "No Anime or Id given" },
          "500": { "description": "Error updating Anime" }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Users"],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "New User is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "No User given"
          },
          "409": { "description": "Conflict" },
          "500": {
            "description": "Error Saving User"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Generate an authentication token",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login Object Created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Invalid password or username/email"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Removes the authentication token",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "Logged out",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/u/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users in the system",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 1,
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 10,
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "500": { "description": "Error Finding Users" }
        },
        "security": [
          {
            "user_jwt_auth": []
          }
        ]
      }
    },
    "/u/user": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": { "description": "User not Found" },
          "400": { "description": "No User given" },
          "500": { "description": "Error Finding User" }
        },
        "security": [
          {
            "user_jwt_auth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete User with given ID",
        "tags": ["Users"],
        "responses": {
          "204": {
            "description": "User is deleted"
          },
          "404": { "description": "User not Found" },
          "400": { "description": "No User given" },
          "500": { "description": "Error deleting User" }
        },
        "security": [
          {
            "user_jwt_auth": []
          }
        ]
      },
      "put": {
        "summary": "Update User with given ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": { "description": "User not Found" },
          "400": { "description": "No User or Id given" },
          "409": { "description": "Conflict" },
          "500": { "description": "Error updating User" }
        },
        "security": [
          {
            "user_jwt_auth": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "user_jwt_auth": {
      "type": "apiKey",
      "in": "header",
      "name": "x-access-token"
    }
  },
  "definitions": {
    "Login": {
      "required": ["password"],
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "User": {
      "required": ["username", "email", "password"],
      "properties": {
        "username": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "favouriteManga": {
          "type": "array",
          "items": {
            "id": { "$oid": { "type": "string" } },
            "watchStatus": { "type": "string", "default": "To Watch" },
            "currentChapter": { "type": "number", "default": 0 }
          }
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/User"
      }
    },
    "Manga": {
      "required": ["title"],
      "properties": {
        "title": {
          "type": "string",
          "uniqueItems": true
        },
        "chapter": {
          "type": "number"
        },
        "genres": {
          "type": "array",
          "items": { "type": "string" }
        },
        "status": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "Mangas": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Manga"
      }
    },
    "Anime": {
      "required": ["title"],
      "properties": {
        "title": {
          "type": "string",
          "uniqueItems": true
        },
        "episode": {
          "type": "number"
        },
        "genres": {
          "type": "array",
          "items": { "type": "string" }
        },
        "status": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "Animes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Anime"
      }
    }
  }
}
